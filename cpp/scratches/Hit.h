//////////////////////////////////////////////////////////////////////
//class Hit: This class represents the hit generated by
//           particles impacting against detectors.
//           Hits objects are generally stored in a file, they are
//           fundamental data for analysis and reconstruction.
//
//Written by Matteo Concas: mett1990@gmail.com
//Exam: «Tecniche di analisi numerica e simulazione»
//////////////////////////////////////////////////////////////////////

#ifndef Hit_H
#define Hit_H
#include "Punto.h"
#include "Vertice.h"
#include "Direzione.h"
#include <TString.h>
#include <TMaterial.h>

class Hit : public Punto {
   public:

      //_____________{Con,De}structors____________
      Hit();
      Hit(Double_t fX, Double_t fY, Double_t fZ, Int_t fLayerno,
          Int_t fIdnumber=0);
      virtual ~Hit();

      // ____________Inline_Getters_______________
      Int_t  GetLayerNumber() { return layernum; }
      Bool_t IsReal()         { return realhit;  }
      Int_t  GetHitID()       { return idnumber; }

      //_____________Setter_______________________
      void NowRealHit();
      void SetHitID(Int_t fID);
      void SetHitLayno(Int_t fLay);

      //_____________Transport_Generators_________
      ////////////////////////////////////////////////////////////////
      // It generates a Hit starting from a vtx.
      static Hit *HitOnCylFromVertex( Vertice &fOrigin,
                                      Direzione &fDirect,
                                      Double_t fRadius,
                                      Int_t fIde,
                                      Int_t fLayno=0 );

      ////////////////////////////////////////////////////////////////
      // It generates a Hit starting from a Hit, including the
      // possibility of multiple scattering with a TMaterial that
      // cross the trajectory.
      Hit *GetHitOnCyl( Direzione &fDirect,
                        Double_t fRadius,
                        TMaterial &fMaterial,
                        Double_t fWidth,
                        Int_t fIde,
                        Bool_t multscat=kTRUE,
                        Int_t fLayno=0,
                        Double_t fP=750,
                        Int_t fZ=1,
                        Double_t fBeta=1 );

      ////////////////////////////////////////////////////////////////
      // Compute the cylinder-line intersection and returns the "t"
      // parameter.
      static Double_t ComputeT( Double_t fTheta,
                                Double_t fPhi,
                                Double_t fXO,
                                Double_t fYO,
                                Double_t fRadius );

      //_____________Smearing_Generator______
      ////////////////////////////////////////////////////////////////
      // Due to the finite resolution of detectors the coordinates are
      // slightly modified by a Gaussian algorythm.
      void GausSmearing( Double_t fDRadius,
                         Double_t fSZeta,
                         Double_t fSX      );



      //_____________Noise_Generator_________
      ////////////////////////////////////////////////////////////////
      // The first generator creates uniformly distributed hits on
      // a cylindrical surface (e.g. a Detector).

      static Hit *EleNoiseOnCyl( Double_t fCRadius,
                                 Double_t fZetamin,
                                 Double_t fZetamax );


   protected:
      Int_t  layernum;       // It keeps track of the layer hit
      Int_t  idnumber;
      Bool_t realhit;        // Is it a real hit?

   ClassDef(Hit,1)
};
#endif
